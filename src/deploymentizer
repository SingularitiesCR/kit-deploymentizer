#!/usr/bin/env node
"use strict";

const logger = require("log4js").getLogger();
const program = require("commander");
const packageJson = require("../package.json");
const Promise = require("bluebird");
const Deploymentizer = require("./lib/deploymentizer");
const yamlHandler = require("./util/yaml-handler");
const exit = process.exit;

const parseBoolean = function(str) {
  return str === "true";
};

/**
 * loads a conf file. Valid conf:
 * {
 *	base: { path: "/" },
 *	output: { path: "/" },
 *	cluster: { path: "/" },
 *	resources: { path: "/" },
 *	type: { path: "/" },
 *	images: { path: "/" },
 *	plugin: {
 *		path: "/",
 *		options: {
 *		 // any required options for plugin
 *		}
 *	}
 * }
 * @param  {[type]} confPath [description]
 * @return {[type]}          [description]
 */
const loadConf = function(confPath) {
  return Promise.coroutine(function*() {
    let exists = yield yamlHandler.exists(confPath);
    if (exists) {
      const conf = yield yamlHandler.loadFile(confPath);
      return conf;
    } else {
      throw new Error("No Configuration file found");
    }
  })();
};
/**
 * Most values should be set in the conf file, with the exception of --clean and --save
 * At least --conf flags must be set.
 */
program
  .version(packageJson.version)
  .usage("[options]")
  .option(
    "-c, --clean <boolean>",
    "Set if the output directory should be deleted and re-created before generating manifest files",
    parseBoolean,
    parseBoolean(process.env.CLEAN)
  )
  .option(
    "-s, --save <boolean>",
    "Sets if the generated manifest files are saved to the output diretory or not",
    parseBoolean,
    parseBoolean(process.env.SAVE)
  )
  .option(
    "-w, --workdir <string>",
    "Sets the working directory for reading paths defined in the conf file. Allows absolute paths in conf also.",
    process.env.WORKDIR
  )
  .option(
    "-k, --conf <string>",
    "Sets the configure file to load at start up - Required.",
    process.env.CONF
  )
  .option(
    "-d, --debug <boolean>",
    "Sets debug flag",
    parseBoolean,
    parseBoolean(process.env.DEBUG)
  )
  .option(
    "-r, --resource <string>",
    "Sets the resource to generate",
    process.env.RESOURCE
  )
  .option(
    "-t, --clusterType <string>",
    "Sets the cluster type to generate. Cannot be used with clusterName.",
    process.env.CLUSTER_TYPE
  )
  .option(
    "--deployId <string>",
    "Sets the deployment id to use. Can only be used for single Resource",
    process.env.DEPLOY_ID
  )
  .option(
    "--fastRollback <boolean>",
    "When enabled it will configure fastrollback support via Service generation",
    parseBoolean,
    parseBoolean(process.env.FAST_ROLLBACK)
  )
  .option(
    "--clusterName <string>",
    "Sets the name of the cluster to generate. Cannot be used with clusterType.",
    process.env.CLUSTER_NAME
  )
  .option(
    "--elroyOnly <boolean>",
    "When enabled it will only generate what it needs to do an Elroy update",
    parseBoolean,
    parseBoolean(process.env.ELROY_ONLY)
  )
  .option(
    "--elroyUrl <string>",
    "Set to an Elroy URL where you want the generated cluster information sent",
    process.env.ELROY_URL
  )
  .option(
    "--elroySecret <string>",
    "The secret to use when making an Elroy API request",
    process.env.ELROY_SECRET
  )
  .option(
    "--ciBranch <string>",
    "The branch to use as image fallback",
    process.env.CI_BRANCH
  )
  .parse(process.argv);

if (program.debug) {
  // Have to enable this BEFORE any promises are created
  Promise.longStackTraces();
}

loadConf(program.conf).then(conf => {
  const deploymentizer = new Deploymentizer({
    elroyOnly: program.elroyOnly,
    elroyUrl: program.elroyUrl,
    elroySecret: program.elroySecret,
    clean: program.clean,
    save: program.save,
    workdir: program.workdir,
    conf: conf,
    resource: program.resource,
    clusterType: program.clusterType,
    clusterName: program.clusterName,
    deployId: program.deployId,
    fastRollback: program.fastRollback,
    ciBranch: program.ciBranch
  });
  // Enable logging of all events from the deploymentizer
  deploymentizer.events.on(deploymentizer.events.INFO, function(message) {
    logger.info(message);
  });
  deploymentizer.events.on(deploymentizer.events.WARN, function(message) {
    logger.warn(message);
  });
  deploymentizer.events.on(deploymentizer.events.FATAL, function(message) {
    logger.fatal(message);
  });
  if (program.debug) {
    process.env.DEBUG = "true";
    deploymentizer.events.on(deploymentizer.events.DEBUG, function(message) {
      logger.debug(message);
    });
  }

  // Run the deploymentizer
  return deploymentizer
    .process()
    .then(function() {
      exit(0);
    })
    .catch(function(err) {
      if (err.stack) {
        logger.fatal(err.stack);
      } else {
        logger.fatal(err.message || err);
      }
      exit(1);
    })
    .done();
});
